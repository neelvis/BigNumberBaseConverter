type: edu
custom_name: Menu, please!
files:
- name: src/cinema/Cinema.kt
  visible: true
  text: "package cinema\n\nfun main() {\n    // Read cinema hall size\n    print(\"\
    \"\"\n        |Enter the number of rows:\n        |>\n    \"\"\".trimIndent())\n\
    \    val rows = readLine()!!.toInt()\n    print(\"\"\"\n        |Enter the number\
    \ of seats in each row:\n        |>\n    \"\"\".trimIndent())\n    val seats =\
    \ readLine()!!.toInt()\n\n    // Show free seats\n    visualizeChosenPlace(rows,\
    \ seats, 0, 0)\n\n    // Choose a seat\n    print(\"\"\"\n        | \n       \
    \ |Enter a row number:\n        |>\n    \"\"\".trimIndent())\n    val chosenRow\
    \ = readLine()!!.toInt()\n    print(\"\"\"\n        |Enter a seat number in that\
    \ row:\n        |>\n    \"\"\".trimIndent())\n    val chosenSeat = readLine()!!.toInt()\n\
    \n    // Show ticket cost and reserve a place\n    print(\"\"\"\n        | \n\
    \        | Ticket price: $${calculateTicketCost(rows, seats, chosenRow)}\n   \
    \ \"\"\".trimIndent())\n\n    visualizeChosenPlace(rows, seats, chosenRow, chosenSeat)\n\
    }\n\nfun showProfit(rows: Int, seats: Int) {\n\n    print(\"\"\"\n        |Total\
    \ income:\n        |\\$${calculateProfit(rows, seats)}\n    \"\"\".trimIndent())\n\
    }\n\nfun calculateProfit(rows: Int, seats: Int): Int {\n    if (rows * seats <\
    \ 60) return rows * seats * 10\n\n    val frontHalf = rows / 2\n    val backHalf\
    \ = rows - frontHalf\n    return frontHalf * seats * 10 + backHalf * seats * 8\n\
    \n}\n\nfun calculateTicketCost(rows: Int, seats: Int, chosenRow: Int): Int {\n\
    \    if (rows * seats < 60 || chosenRow <= rows / 2) return 10\n    return 8\n\
    }\n\nfun visualizeChosenPlace(rows: Int, seats: Int, chosenRow: Int, chosenSeat:\
    \ Int) {\n    print(\"\"\"\n        | \n        |Cinema:\n    \"\"\".trimIndent())\n\
    \    print(\"  \")\n    for (i in 1..seats) print(\"$i \")\n    println(\"\")\n\
    \    for (i in 1..rows) {\n        print(\"$i \")\n        for(j in 1..seats)\
    \ {\n            if (i == chosenRow && j == chosenSeat) print(\"B \")\n      \
    \      else print(\"S \")\n        }\n        println(\"\")\n    }\n}\n"
  learner_created: false
- name: test/CinemaTests.java
  visible: false
  text: |
    import org.hyperskill.hstest.dynamic.input.DynamicTestingMethod;
    import org.hyperskill.hstest.exception.outcomes.WrongAnswer;
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testing.TestedProgram;

    public class CinemaTests extends StageTest<String> {

        @DynamicTestingMethod
        CheckResult test1_checkExit() {

            TestedProgram program = new TestedProgram();
            String output = program.start().strip();

            if (!output.toLowerCase().contains("enter the number of rows")) {
                return CheckResult.wrong("At the beginning your program should ask for entering the number of rows.\n" +
                    "Your output should contain 'Enter the number of rows:'.");
            }

            output = program.execute("7");

            if (!output.toLowerCase().contains("enter the number of seats in each row")) {
                return CheckResult.wrong("After entering the number of rows your program should ask for entering" +
                    " the number of seats in each row.\n" +
                    "Your output should contain 'Enter the number of seats in each row'.");
            }

            output = program.execute("8").toLowerCase();

            if (!output.contains("show the seats") ||
                !output.contains("buy a ticket") ||
                !output.contains("exit")) {
                return CheckResult.wrong("Your menu should contain 3 items:\n" +
                    "1. Show the seats\n" +
                    "2. Buy a ticket\n" +
                    "0. Exit");
            }

            program.execute("0");

            if (!program.isFinished()) {
                return CheckResult.wrong("After choosing 'Exit' item you should stop your program.");
            }

            return CheckResult.correct();
        }

        @DynamicTestingMethod
        CheckResult test2_checkSeatingArrangement() {

            TestedProgram program;
            String output;

            program = new TestedProgram();
            program.start();
            program.execute("7\n8");

            output = program.execute("1").toLowerCase();
            checkSeats(output, 7, 8);

            if (!output.contains("show the seats") ||
                !output.contains("buy a ticket") ||
                !output.contains("exit")) {
                return CheckResult.wrong("After showing the seats arrangement you should print the menu again!");
            }

            program.stop();

            program = new TestedProgram();
            program.start();
            program.execute("2\n2");

            output = program.execute("1");
            checkSeats(output, 2, 2);

            program.stop();

            program = new TestedProgram();
            program.start();
            program.execute("9\n9");

            output = program.execute("1");
            checkSeats(output, 9, 9);

            program.execute("0");
            return CheckResult.correct();
        }

        @DynamicTestingMethod
        CheckResult test3_checkBuyTicket() {

            TestedProgram program;
            String output;

            program = new TestedProgram();
            program.start();
            program.execute("7\n8");

            output = program.execute("2");

            if (!output.toLowerCase().contains("enter a row number:")) {
                return CheckResult.wrong("After choosing 'Buy a ticket' item you should ask for entering a row number.\n" +
                    "Your output should contain 'Enter a row number:'.");
            }

            output = program.execute("2");

            if (!output.toLowerCase().contains("enter a seat number in that row:")) {
                return CheckResult.wrong("After entering a row number you should ask for entering a seat number in that row.\n" +
                    "Your output should contain 'Enter a seat number in that row:'.");
            }

            output = program.execute("4").toLowerCase();

            if (!output.contains("ticket price")) {
                return CheckResult.wrong("After entering a row number and a seat number in that row you should print" +
                    " the ticket price.\n" +
                    "Your output should contain 'Ticket price:'.");
            }

            if (!output.contains("$10")) {
                return CheckResult.wrong("Looks like you miscalculated the ticket price. Can't find '$10' in your output.");
            }

            if (!output.contains("show the seats") ||
                !output.contains("buy a ticket") ||
                !output.contains("exit")) {
                return CheckResult.wrong("After buying a ticket you should print the menu again!");
            }

            output = program.execute("1");
            checkTakenSeat(output, 7, 8, 2, 4);

            output = program.execute("2\n3\n5\n1");
            checkTakenSeat(output, 7, 8, 3, 5);

            return CheckResult.correct();
        }

        @DynamicTestingMethod
        CheckResult test4_checkTicketPrice() {

            TestedProgram program;
            String output;

            program = new TestedProgram();
            program.start();
            program.execute("9\n9");

            program.execute("2");
            output = program.execute("1\n1");

            if (!output.contains("$10")) {
                return CheckResult.wrong("Looks like you miscalculated the ticket price. Can't find '$10' in your output.");
            }

            program.execute("2");
            output = program.execute("4\n5\n1");

            if (!output.contains("$10")) {
                return CheckResult.wrong("Looks like you miscalculated the ticket price. Can't find '$10' in your output.");
            }
            checkTakenSeat(output, 9, 9, 4, 5);


            program.execute("2");
            output = program.execute("5\n5\n1");

            if (!output.contains("$8")) {
                return CheckResult.wrong("Looks like you miscalculated the ticket price. Can't find '$8' in your output.");
            }
            checkTakenSeat(output, 9, 9, 4, 5);
            checkTakenSeat(output, 9, 9, 5, 5);

            program.execute("2");
            output = program.execute("6\n6\n1");

            if (!output.contains("$8")) {
                return CheckResult.wrong("Looks like you miscalculated the ticket price. Can't find '$8' in your output.");
            }
            checkTakenSeat(output, 9, 9, 4, 5);
            checkTakenSeat(output, 9, 9, 5, 5);
            checkTakenSeat(output, 9, 9, 6, 6);

            return CheckResult.correct();
        }


        private void checkSeats(String output, int rows, int columns) {

            if (!output.toLowerCase().contains("cinema:")) {
                throw new WrongAnswer("After entering a row number and a seat number in that row you should print" +
                    " the seating arrangement like in example!\n" +
                    "Your output should contain 'Cinema:'");
            }

            String arrangement = output.toLowerCase().split("cinema:")[1].trim();
            StringBuilder header = new StringBuilder();

            for (int i = 0; i < columns; i++) {
                header.append(i + 1);
                if (i != columns - 1) {
                    header.append(" ");
                }
            }

            if (!arrangement.startsWith(header.toString())) {
                throw new WrongAnswer("The first line of the seating arrangement should be " +
                    "'  " + header + "'");
            }

            String[] splittedOutput = arrangement.split("\n");

            for (int i = 1; i < rows + 1; i++) {

                if (i == splittedOutput.length) {
                    throw new WrongAnswer("In the seating arrangement should be " + rows + " rows!");
                }

                String errorMessage = "The ";
                if (i == 1) {
                    errorMessage += "second ";
                } else if (i == 2) {
                    errorMessage += "third  ";
                } else {
                    errorMessage += i + "th ";
                }

                errorMessage += "line of the seating arrangement ";

                if (!splittedOutput[i].contains("" + i)) {
                    errorMessage += "should start with \"" + i + "\"";
                    throw new WrongAnswer(errorMessage);
                }

                String line = splittedOutput[i].replace("" + i, "").trim();
                String seats = "";

                for (int j = 0; j < columns; j++) {
                    seats += "S ";
                }

                if (!line.toUpperCase().equals(seats.trim())) {
                    errorMessage += "should be \"" + i + " " + seats.trim() + "\"";
                    throw new WrongAnswer(errorMessage);
                }
            }
        }

        private void checkTakenSeat(String output, int rows, int columns, int row, int column) {

            if (!output.toLowerCase().contains("cinema:")) {
                throw new WrongAnswer("After entering a row number and a seat number in that row you should print" +
                    " the seating arrangement like in example!\n" +
                    "Your output should contain 'Cinema:'");
            }

            String arrangement = output.toLowerCase().split("cinema:")[1].trim();
            StringBuilder header = new StringBuilder();

            for (int i = 0; i < columns; i++) {
                header.append(i + 1);
                if (i != columns - 1) {
                    header.append(" ");
                }
            }

            if (!arrangement.startsWith(header.toString())) {
                throw new WrongAnswer("The first line of the seating arrangement should be " +
                    "'  " + header + "'");
            }

            String[] splittedOutput = arrangement.split("\n");

            for (int i = 1; i < rows + 1; i++) {

                if (i == splittedOutput.length) {
                    throw new WrongAnswer("In the seating arrangement should be " + rows + " rows!");
                }

                String errorMessage = "The ";
                if (i == 1) {
                    errorMessage += "second ";
                } else if (i == 2) {
                    errorMessage += "third ";
                } else {
                    errorMessage += i + "th ";
                }

                errorMessage += "line of the seating arrangement ";

                if (!splittedOutput[i].contains("" + i)) {
                    errorMessage += "should start with \"" + i + "\"";
                    throw new WrongAnswer(errorMessage);
                }

                if (i == row) {
                    String line = splittedOutput[i];

                    if (!line.contains("b")) {
                        errorMessage += "should contain 'B' symbol.";
                        throw new WrongAnswer(errorMessage);
                    }

                    String[] splittedLine = line.trim().split(" ");

                    if (splittedLine.length != columns + 1) {
                        errorMessage += "should be printed like in examples. Expected 1 number, " + columns + " symbols and a single space between of them!";
                        throw new WrongAnswer(errorMessage);
                    }

                    if (!splittedLine[column].equals("b")) {
                        errorMessage += "should contain 'B' symbol at " + column + " column";
                        throw new WrongAnswer(errorMessage);
                    }
                }
            }
        }
    }
  learner_created: false
feedback_link: https://hyperskill.org/projects/138/stages/738/implement#comment
status: Solved
record: 3
